import {Action, Command, Ctx, Hears, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { AppService } from './app.service';
import { Context } from './context.interface';
import {actionButtons} from "./app.buttons";
import { showList } from './app.utils';

const todos = [{
    id: 1,
    name: 'Buy goods',
    isCompleted: false,
  },{
    id: 2,
    name: 'Go to walk',
    isCompleted: false,
  },{
    id: 3,
    name: 'Travel',
    isCompleted: true,
  }]

@Update()
export class AppUpdate {
  constructor(
      @InjectBot() private readonly bot: Telegraf<Context>,
      private readonly appService: AppService
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Hi friend üëã!')
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons())
  }

  @Hears('ü§å –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
  async createTasks(ctx: Context) {
    ctx.deleteMessage()
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
    ctx.session.type = 'create'
  }

  @Hears('üóí –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async listTasks(ctx: Context) {
    ctx.deleteMessage()
    const todos = await this.appService.getAll()
    await ctx.reply(showList(todos))
  }

  @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
  async doneTask(ctx: Context) {
    ctx.deleteMessage()
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
    ctx.session.type = 'done'
  }

  @Hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
  async editTask(ctx: Context) {
    ctx.deleteMessage()
    await ctx.replyWithHTML(
        '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ: <i>id \\ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏</i>'
    )
    ctx.session.type = 'edit'
  }

  @Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
  async removeTask(ctx: Context) {
    ctx.deleteMessage()
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
    ctx.session.type = 'remove'
  }

  @On('text')
  async getMessage(
    @Message('text') message: string,
    @Ctx() ctx: Context
  ) {
    if (!ctx.session.type) ctx.reply('–í—ã–±–∏—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É')
    ctx.deleteMessage()

    if (ctx.session.type === 'create') {
      const todos = await this.appService.createTask(message)
      await ctx.reply(showList(todos))
      ctx.session.type = undefined
    }

    if (ctx.session.type === 'done') {
      const todos = await this.appService.doneTask(Number(message))

      if (!todos) {
        ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return
      }

      await ctx.reply(showList(todos))
      ctx.session.type = undefined
    }

    if (ctx.session.type === 'edit') {
      const [id, text] = message.split(' | ')

      const todos = await this.appService.editTask(Number(id), text)

      if (!todos) {
        ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return
      }

      await ctx.reply(showList(todos))
      ctx.session.type = undefined
    }

    if (ctx.session.type === 'remove') {
      const todos = await this.appService.removeTask(Number(message))

      if (!todos) {
        ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return
      }

      await ctx.reply(showList(todos))
      ctx.session.type = undefined
    }
  }
}
